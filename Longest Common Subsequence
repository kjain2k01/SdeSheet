
public class Solution {

	public static int lcs(String str1, String str2) {
		//Your code goes here// Write your code here.
        //use tabulization method
        
        int n = str1.length();
        int m = str2.length();
        
        //create table
        int[][] dp = new int[n+1][m+1];
        
        //intitalization step
        //if the length of str2 == 0 then the lcs = 0
        for(int i = 0; i<=n; i++)
            dp[i][0] = 0;
        
        //if the length of str1 = 0;
        for(int i = 0; i<=m; i++)
            dp[0][i] = 0;
        
        for(int i = 1; i<=n; i++){
            for(int j = 1; j<=m; j++){
                //if the ith and jth characters of both string are equal then we will increase the length of our lcs
                if(str1.charAt(i-1) == str2.charAt(j-1))
                    dp[i][j] = 1 + dp[i-1][j-1]; //adding 1 to previously calculated lcs
                
                /*
                if the character at i th and jth character of correspondings character are not equal then we calculate themax( lcs of str1 and str2 by not including the jth character of str2 in answer , lcs of str1 by not including the ith character of str1 in answer and str2
                */
                else if(str1.charAt(i-1) != str2.charAt(j-1))
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
            }
        }
        return dp[n][m];
    }

}
/* Time Complexity : O(n*m)
Space Complexity : O(n*m) */
