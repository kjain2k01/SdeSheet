
class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj){
        //let's do with dfs
        
        boolean[] visited = new boolean[V];
        Arrays.fill(visited, false);
        
        for(int i = 0; i<V; i++){
            if(visited[i] == false)
                if(isCycle(adj, i, -1, visited) == true)
                    return true;
        }
        return false;
    }
    
    public static boolean isCycle(ArrayList<ArrayList<Integer>> adj, int node, int parent, boolean[] visited){
               visited[node] = true;
        for(Integer adjNodes : adj.get(node))
        {
           if(adjNodes == node)
                continue;
            if(visited[adjNodes] = true)
                return true;
                        
           else
           {
               if(isCycle(adj, adjNodes, node, visited) == true)
                    return true;
           }
                   
        }
               
        return false;
    }
}
