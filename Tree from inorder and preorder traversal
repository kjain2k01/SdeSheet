/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] preorder, int[] inorder) {
            if(inorder == null || preorder == null || inorder.length != preorder.length)
            return null;
        
        HashMap<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i<inorder.length; i++){
            map.put(inorder[i], i);    
        }
        
        return buildTree(inorder, 0, inorder.length-1, preorder,0, preorder.length-1, map);
    }
    
    static TreeNode buildTree(int[] inorder, int in_start, int in_end, int[] preorder , int pre_start, int pre_end, Map<Integer, Integer> map){
        if(pre_start > pre_end || in_start > in_end)
            return null;
        
        TreeNode root = new TreeNode(preorder[pre_start]);
        
        int index = map.get(root.val);
        
        root.left = buildTree(inorder, in_start, index - 1, preorder, pre_start + 1, pre_start + index - in_start, map);
        
        root.right = buildTree(inorder, index + 1, in_end, preorder, pre_start +(index - in_start) + 1, pre_end, map);
        
        return root;
    }
}
