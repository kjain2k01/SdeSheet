/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
       if (inorder == null || postorder == null || inorder.length != postorder.length)
		return null;
           
        
        Map<Integer, Integer> map = new HashMap<>();
        
        for(int i = 0; i<inorder.length; i++)
            map.put(inorder[i], i);
        
        return buildTree(inorder, 0, inorder.length-1, postorder, 0, postorder.length-1, map);
    }
    
    public static TreeNode buildTree(int[] inorder, int in_start, int in_end, int[] postorder, int p_start, int p_end, Map<Integer, Integer> map){
        
        if(p_start > p_end || in_start > in_end)
            return null;
        
        TreeNode root = new TreeNode(postorder[p_end]);
        int index = map.get(root.val);
        int numsLeft = in_end - index;
        
        root.left = buildTree(inorder, in_start, index -1, postorder, p_start, p_start+index-in_start-1, map);
        
        root.right = buildTree(inorder, index + 1, in_end, postorder, p_start + index-in_start, p_end - 1, map);
       return root; 
    }
}
