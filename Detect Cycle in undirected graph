using bfs 
class Pair{
    int val;
    int parent;
    
    Pair(int val, int parent){
        this.val = val;
        this.parent = parent;
    }
}
public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        
        //using bfs
        //need - visited array, queue, parent
        boolean[] visited = new boolean[V];
        int[] parent = new int[V];
        
        Arrays.fill(visited, false);
        Arrays.fill(parent, -1);
        
        
        for(int i = 0; i<V; i++){
            if(visited[i] == false)
                if(isCycle(i,adj, V, visited, parent) == true)
                return true;
        }
        return false;
    }
    
    static boolean isCycle(int node, ArrayList<ArrayList<Integer>> adj, int v, 
    boolean[] visited, int[] parent){
        visited[node] = true;
        
            Queue<Pair> q = new LinkedList<>();
            q.add(new Pair(node, parent[node]));
        
        while(!q.isEmpty()){
            Pair currNode = q.poll();
            for(Integer it : adj.get(currNode.val))
            {
                if(visited[it] == false)
                {
                    visited[it] = true;
                    parent[it] = currNode.val;
                    q.add(new Pair(it, currNode.val));
                }
                else if(it != currNode.parent)
                    return true;
            }
            
        }
        return false;
    }
}
