//Time Complexity - O(n)
public class Solution {
    public static List<List<Integer>> getTreeTraversal(BinaryTreeNode<Integer> root) {
        // Write your code here.
        //preorder - 1
        //inorder - 2
        //postorder - 3
        List<List<Integer>> ans = new ArrayList<>();
        if(root == null)
            return ans;
        List<Integer> preorder = new ArrayList<Integer>();
        List<Integer> inorder = new ArrayList<Integer>();
        List<Integer> postorder = new ArrayList<Integer>();
        
        Stack<Pair> st = new Stack<>();
        st.push(new Pair(root, 1));
        
        while(!st.isEmpty()){
            Pair pair = st.pop();
            
            if(pair.index == 1){
                preorder.add(pair.node.data);
                pair.index++;
                  st.push(pair);
                if(pair.node.left != null)
                  st.push(new Pair(pair.node.left, 1));
            }
            else if(pair.index == 2)
            {
                inorder.add(pair.node.data);
                pair.index++;
                st.push(pair);
                if(pair.node.right != null)
                    st.push(new Pair(pair.node.right, 1));
            }
            else if(pair.index == 3)
                postorder.add(pair.node.data);
        }
        
       
        
            ans.add(new ArrayList<Integer>(inorder));
             ans.add(new ArrayList<Integer>(preorder));
         ans.add(new ArrayList<Integer>(postorder));
        return ans;
    }
}
