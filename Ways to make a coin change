
public class Solution {

	public static long countWaysToMakeChange(int coins[], int value){
        //write your code here	
        long[][] dp = new long[coins.length + 1][value + 1];
        //row -- coin
        //col -- value to be formed
        
        //intitalization
        //if the target value is zero then we can form target value by not including any coin so there is one way to do it so initalize this case with 1
        
        for(int i = 0; i<=coins.length; i++)
            dp[i][0] = 1;
        
        //if our coin is zero so there is zero ways to form the target value
        for(int i = 1; i<=value; i++)
            dp[0][i] = 0;
        
        for(int i = 1; i<=coins.length; i++){
            for(int j = 1; j<=value; j++){
                if(j < coins[i-1])
                    dp[i][j] = dp[i-1][j];
                
                else
                    dp[i][j] = dp[i-1][j] + dp[i][j-coins[i-1]];
            }
        }
        long ans = dp[coins.length][value];
    
            return ans;
	}
	
}
