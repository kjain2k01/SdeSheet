public class Solution {
	public static int cutRod(int price[], int n) {
		// Write your code here.
        
        //create dp table 
        //row -- price.length
        //col -- rod length + 1
        int[][] dp = new int[price.length + 1][n + 1];
        
        //intialization
        //if our rod length is zero then the maximum earned profit will also be zero
        for( int i = 0; i<= price.length; i++){
            dp[i][0] = 0;
        }  
        //if our price is zero then for every possible length of rod our profit will be zero
           for(int  i = 0; i<=n; i++)
               dp[0][i] = 0;
            
            for(int  i = 1; i<= price.length; i++){
                for(int j = 1; j<=n; j++){
                    //i is representing the price of ith length in price array thats why we compare i not price[i];
                    if(i > j)
                        dp[i][j] = dp[i-1][j];
                    
                    else{
                        dp[i][j] = Math.max(dp[i-1][j], price[i-1] + dp[i][j-i]);
                    }
                }
            }
            return dp[price.length][n];
        
	}
}
/*Time Complexity = O(price.length * n);
Space complexity = O(price.length * n); */
