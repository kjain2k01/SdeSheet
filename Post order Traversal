//Iterative Approach
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        Stack<TreeNode> s1 = new Stack<>();
        Stack<TreeNode> s2 = new Stack<>();
        List<Integer> ans = new ArrayList<>();
        TreeNode curr = root;
        s1.push(curr);
       
          while (!s1.isEmpty()) {
              
            curr = s1.peek();
            s1.pop();
            s2.push(curr);
            if (curr != null && curr.left != null)
                s1.push(curr.left);
            if (curr != null &&curr.right != null)
                s1.push(curr.right);
        }
        while(!s2.isEmpty())
        {
            if(s2.peek()!= null)
            ans.add(s2.peek().val);
            s2.pop();
        }
        return ans;
    }
}

//Recursive Approach

class Solution {
 
    public List<Integer> postorderTraversal(TreeNode root) {
    List<Integer> ans = new ArrayList<>();     
        postorder(root, ans);
        return ans;
    }
    static void postorder(TreeNode root,List<Integer> ans){
        if(root == null)
            return;
        postorder(root.left, ans);
        postorder(root.right, ans);
        ans.add(root.val);
    }
}
