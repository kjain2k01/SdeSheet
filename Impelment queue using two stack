Two Basic implementation of queue using stack**

In this first implementation - push operation - O(1)
pop operation - O(n)
peek operation - O(1)


class MyQueue {
//pop operation - o(n)
    Stack<Integer> enqueue; 
    Stack<Integer> dequeue;
    public MyQueue() {
        enqueue = new Stack<>();
        dequeue = new Stack<>();
    }
    
    public void push(int x) {
        enqueue.push(x);
    }
    
    public int pop() {
        while(enqueue.size() != 0){
            dequeue.push(enqueue.pop());
        }
        
        int top = dequeue.peek();
        dequeue.pop();
        
        while(dequeue.size() != 0){
            enqueue.push(dequeue.pop());
        }
        
    return top;
        
    }
    
    public int peek() {
       while(enqueue.size() != 0){
            dequeue.push(enqueue.pop());
        }
        
        int top = dequeue.peek();
        
        while(dequeue.size() != 0){
            enqueue.push(dequeue.pop());
        }
        
    return top;
        
    }
    
    public boolean empty() {
        
        return enqueue.isEmpty();
    }
}


In this implementation push operation - O(n)
pop operation - O(1)
peek operation - O(1)

```
class MyQueue {
    //pop - o(1)
    Stack<Integer> enqueue; 
    Stack<Integer> dequeue;
    
    public MyQueue() {
            enqueue = new Stack<>();
            dequeue = new Stack<>();    
    }
    
    public void push(int x) {
        if(enqueue.isEmpty()){
            enqueue.push(x);
            return;
        }
        
        while(enqueue.isEmpty() == false){
            dequeue.push(enqueue.pop());
        }
        
        dequeue.push(x);
        
        while(dequeue.isEmpty() == false){
            enqueue.push(dequeue.pop());
        }
    }
    
    public int pop() {
        return enqueue.pop();
    }
    
    public int peek() {
        return enqueue.peek();
    }
    
    public boolean empty() {
        return enqueue.isEmpty();
    }
}

```



I
